// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2830.PowerUp.subsystems;

import org.usfirst.frc2830.PowerUp.RobotMap;
import org.usfirst.frc2830.PowerUp.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.Joystick;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;



/**
 *
 */
public class DriveTrain extends Subsystem {


    private final SpeedController speedController1 = RobotMap.driveTrainSpeedControllerFrontLeft;
    private final SpeedController speedController2 = RobotMap.driveTrainSpeedControllerBackLeft;
    private final SpeedController speedController3 = RobotMap.driveTrainSpeedControllerBackRight;
    private final SpeedController speedController4 = RobotMap.driveTrainSpeedControllerFrontRight;
    private final DifferentialDrive robotDrive41 = RobotMap.driveTrainRobotDrive41;
	static double controllerCorrection = .35;
	static double joystickDeadband = .02;

    @Override
    public void initDefaultCommand() {
        setDefaultCommand(new SplitArcade());

    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void driveSplitArcade(Joystick driverStick){
		double throttle = deadbanded((-1*driverStick.getRawAxis(2)) + driverStick.getRawAxis(3), joystickDeadband);
		double steering = deadbanded(-1*driverStick.getRawAxis(0), joystickDeadband);

		robotDrive41.arcadeDrive(throttle, steering, true);
    }
    
	public double deadbanded(double val, double deadband) {
		if (Math.abs(val) > Math.abs(deadband)) {
			return val;
		} else {
			return 0.0;
		}
	}

}

