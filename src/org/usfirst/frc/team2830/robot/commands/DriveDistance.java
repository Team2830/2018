package org.usfirst.frc.team2830.robot.commands;

import org.usfirst.frc.team2830.robot.Robot;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * @param m_distance
 *            is the goal distance of the robot
 * @param m_speed
 *            is the speed the robot will drive
 */
public class DriveDistance extends Command {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double m_distance;
	private double m_speed;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private boolean isFirstRun = true;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public DriveDistance(double distance, double speed) {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		m_distance = Robot.driveTrain.getPulsesFromInches(distance);
		m_speed = speed;

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.driveTrain);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	public DriveDistance(double distance) {
		this(distance, 0.7);
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		Robot.driveTrain.resetCounters();
		Robot.driveTrain.setOpenloopRamp(0);
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
    	if(isFirstRun){
    		Robot.driveTrain.resetCounters();
    		isFirstRun = false;
    	}
    	SmartDashboard.putNumber("Encoder Distance Drive", Robot.driveTrain.getDistance());
    	/*if(Robot.drivetrain.getAnalogGyro1().getAngle()>1.00){
    		Robot.drivetrain.driveForward(m_speed,.3);
    	}
    	else if(Robot.drivetrain.getAnalogGyro1().getAngle()<-1.00){
    		Robot.drivetrain.driveForward(m_speed,-.3);
    	}
    	else{
    		Robot.drivetrain.driveForward(m_speed,0);
    	}*/
        double v;
       	double x = Robot.driveTrain.getDistance();
       	double rampDistance = Robot.driveTrain.getPulsesFromInches(18);
       	double vMin = .2;
       	double xRamp = Math.min(rampDistance,m_distance/2);
       	double xBrake = m_distance-Math.min(rampDistance,m_distance/2);
       	if (x>xBrake){
//       		v=(vMin-m_speed)/(m_distance-xBrake)*(2*(x-m_distance));
       		v= m_speed-((m_speed-vMin)/(m_distance-xBrake))*(x-xBrake);
       	}
       	else if (x<xRamp)
       		v=vMin+((m_speed-vMin)/xRamp)*x;
       	else
      		v=m_speed;
       	SmartDashboard.putNumber("Ramp Velocity", v);
       	SmartDashboard.putNumber("Distance Driven", Robot.driveTrain.getInchesFromPulses(x));
       	
       	
    	Robot.driveTrain.driveStraight(v);
       	
    }

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		if (m_distance <= Robot.driveTrain.getDistance()) {
			Robot.driveTrain.driveStraight(0);
			Robot.driveTrain.resetCounters();
			return true;
		}
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.driveTrain.driveStraight(0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		Robot.driveTrain.driveStraight(0);
	}
}
