// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team2830.robot.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.internal.HardwareTimer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc.team2830.robot.RobotMap;
import org.usfirst.frc.team2830.robot.Robot;

/**
 *
 */
public class Turn extends Command {
	private double m_TurnAngle;
	double error;
	public Turn (double turnAngle, double speed){
		new HardwareTimer();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		m_TurnAngle = turnAngle;
		


		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING



		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.driveTrain);
	}
	public Turn(double turnAngle) {
		this(turnAngle, .30);
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		//Robot.driveTrain.resetCounters();
		SmartDashboard.putString("CurrentCommand", "Turn");
		Timer.delay(.3);
		double setPoint = Robot.driveTrain.getAngle()+m_TurnAngle;
		Robot.driveTrain.turnToAngle(setPoint);
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {


	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		SmartDashboard.putBoolean("Turn Finished", false);
		//SmartDashboard.putNumber("Stop Time",stop_time);
		if (Math.abs(RobotMap.talonLeft.getSelectedSensorVelocity(0))
				+Math.abs(RobotMap.talonRight.getSelectedSensorVelocity(0))<50){
			if (Robot.driveTrain.onTarget()){
				return true;
			}
		}
		return false;


	}

	// Called once after isFinished returns true
	protected void end() {
		SmartDashboard.putBoolean("Turn Finished", true);
		Robot.driveTrain.disablePID();
		//Robot.driveTrain.driveStraight(0);
		Timer.delay(.1);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		Robot.driveTrain.driveStraight(0);
		Robot.driveTrain.disablePID();
	}
}

