// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team2830.robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.internal.HardwareTimer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc.team2830.robot.RobotMap;
import org.usfirst.frc.team2830.robot.Robot;

/**
 *
 */
public class Turn extends Command {
	private HardwareTimer timer;

	private double m_TurnAngle;
	private double stop_time;
	private double m_turnSpeed;

	private int checkLoop;
	private boolean  isFirstRun = true;
	
	double error;
	public Turn (double TurnAngle, double speed){
		m_turnSpeed = speed;
		timer = new HardwareTimer();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		m_TurnAngle = TurnAngle;
		stop_time = 0;


		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		checkLoop = 0;

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.driveTrain);
	}
	public Turn(double TurnAngle) {
		this(TurnAngle, .4);
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		Robot.driveTrain.resetCounters();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		if(isFirstRun){
			Robot.driveTrain.resetCounters();
			isFirstRun = false;
		}
		error = m_TurnAngle - RobotMap.ahrs.getAngle();

		if (Math.abs(error) <=25 ){
			if (error > 0){
				Robot.driveTrain.driveForward(0, m_turnSpeed-.2);
			}
			else if (error < 0){
				Robot.driveTrain.driveForward(0, -1*m_turnSpeed + .2);
			}
		}
		else{
			if (error > 0){
				Robot.driveTrain.driveForward(0, m_turnSpeed);
			}
			else{
				Robot.driveTrain.driveForward(0, -1*m_turnSpeed);
			}
		}

	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		SmartDashboard.putNumber("Stop Time",stop_time);

		if (Math.abs(error)<2){
			checkLoop++;
			if (checkLoop > 5){

				Robot.driveTrain.driveForward(0, 0);
				return true;
			} 
			else{
				return false;
			}
		}

		else{
			checkLoop = 0;
			return false;
		}
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.driveTrain.driveForward(0, 0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		Robot.driveTrain.driveForward(0, 0);
	}
}

